---

---

<div class="loading-screen">
  <div class="picture-wrapper">
    <canvas id="loading" width="1100" height="1100"></canvas>
  </div>
</div>

<style>
  .loading-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: hsl(240, 100%, 98%);
    z-index: 9999;
    opacity: 1;
    transition: opacity 1s ease-out;
  }

  .loading-screen.fade-out {
    opacity: 0;
  }

  .picture-wrapper {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  canvas {
    width: 90vw;
    @media (min-width: 768px) {
      width: 60vw;
    }
    @media (min-width: 1025px) {
      width: 35vw;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const body = document.querySelector("body");
    const loadingScreen = document.querySelector(
      ".loading-screen"
    ) as HTMLElement;
    let startTime = performance.now();

    function hideLoadingScreen() {
      requestAnimationFrame(() => {
        loadingScreen.classList.add("fade-out");
        body.style.overflow = "auto";
      });
    }

    function checkCacheAndHide() {
      const loadTime = performance.now() - startTime;
      const isCached = loadTime < 200; // 200ミリ秒未満の場合、キャッシュされていると仮定

      if (isCached) {
        // キャッシュがある場合、短い遅延を設定
        setTimeout(hideLoadingScreen, 200);
      } else {
        // キャッシュがない場合、より長い遅延を設定
        setTimeout(hideLoadingScreen, 800);
      }
    }

    window.addEventListener("load", checkCacheAndHide);

    loadingScreen.addEventListener("transitionend", () => {
      loadingScreen.style.display = "none";
    });
  });

  const canvas = document.getElementById("loading") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d");

  class Planet {
    radius: number;
    distance: number;
    speed: number;
    angle: number;

    constructor(radius, distance, speed) {
      this.radius = radius;
      this.distance = distance;
      this.speed = speed;
      this.angle = Math.random() * Math.PI * 2; // ランダムな初期位置
    }

    update() {
      this.angle += this.speed;
      const x = Math.cos(this.angle) * this.distance + canvas.width / 2;
      const y = Math.sin(this.angle) * this.distance + canvas.height / 2;

      ctx.beginPath();
      ctx.arc(x, y, this.radius, 0, Math.PI * 2);
      ctx.fillStyle = "hsl(45 100% 50%)";
      ctx.fill();
    }

    drawOrbit() {
      ctx.beginPath();
      ctx.arc(
        canvas.width / 2,
        canvas.height / 2,
        this.distance,
        0,
        Math.PI * 2
      );
      ctx.strokeStyle = "hsl(20 100% 50% / 0.35)";
      ctx.lineWidth = 1;
      ctx.stroke();
    }
  }

  const sun = new Planet(15, 0, 0);
  const planets = [new Planet(10, 220, 0.026), new Planet(7, 400, 0.01)];

  function animate() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // 軌道を描画
    planets.forEach((planet) => planet.drawOrbit());

    sun.update();
    planets.forEach((planet) => planet.update());

    requestAnimationFrame(animate);
  }

  animate();
</script>
